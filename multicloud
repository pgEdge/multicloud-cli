#!/usr/bin/env python3

#  Copyright 2023-2024 PGEDGE  All rights reserved. #


import os, sys

os.chdir(os.path.dirname(__file__))
sys.path.append(os.path.join(os.path.dirname(__file__), "lib"))

import fire
from prettytable import PrettyTable
import util


def fire_away(module):
    if not os.path.exists(module):
        util.exit_message(f"'{module}' module not available.")
   
    isJson = False 
    cmd = f"python3 {module}"
    for a in range(2, len(sys.argv)):
        if a == "--json":
            isJson = True

        cmd = f'{cmd} "{sys.argv[a]}"'

    # if not isJson:
    #     print(f"# {cmd}")

    rc = os.system(cmd)
    sys.exit(rc)


def list_providers(json=False):
    """List supported cloud providers."""

    if json:
        util.output_json(util.PROVIDERS)
        return
    
    p = PrettyTable()
    p.field_names = ["Provider", "Libcloud Name", "Description"]
    p.add_rows(util.PROVIDERS)
    p.align["Libcloud Name"] = "l"
    p.align["Description"] = "l"
    print(p)
    
    return


def list_airports(json=False):
   """List Airport Metro-Region Aliases"""

   al = util.airport_list()
   p = PrettyTable()
   p.field_names = ["Geo", "Country", "Airport", "Area", "Lattitude", "Longitude", "Provider", "Region", "Parent", "Locations"]
   p.add_rows(al)
   print(p)


def compute():
    """Provision &/or Control VM's (use './compute --help' for more"""

    rc = fire_away("compute")
    return(rc)


def backup():
  """Coming Soon!"""

  rc = fire_away("backup")
  return(rc)


def storage(*parms):
  """Coming Soon!"""

  rc = fire_away("storage")
  return


def container(*parms):
  """Coming Soon!"""

  rc = fire_away("container")
  return


def dns(*parms):
  """Coming Soon!"""

  rc = fire_away("dns")
  return


def load_balancer(*parms):
  """Coming Soon!"""

  rc = fire_away("loadbalancer")
  return


if __name__ == "__main__":
    fire.Fire(
        {
            "list-providers": list_providers,
            "list-airports":  list_airports,
            "compute":        compute,
            "backup":         backup,
            "storage":        storage,
            "container":      container,
            "dns":            dns,
            "load-balancer":  load_balancer,
        }
    )
